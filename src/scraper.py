import os.path
import asyncio
import logging
from datetime import datetime, timedelta
from aiogram import Bot
from telethon import TelegramClient, errors
from typing import List, Dict, Union
from src.data.database import supabase
from src.data.database import SupabaseDB
from src.config.config import TELEGRAM_BOT_TOKEN, API_ID, API_HASH, PHONE_NUMBER, MISTRAL_KEY
from src.summarization import Summarization

def create_client():
    session_path = os.path.join(os.getcwd(), 'sessions', "bot_session")
    os.makedirs('sessions', exist_ok=True)
    
    client = TelegramClient(
        session_path,
        API_ID,
        API_HASH
    )
    return client

class TelegramScraper:
    _client = None
    running_tasks = {}
    is_initialized = False

    def __init__(self, user_id):
        self.user_id = user_id
        self.db = SupabaseDB(supabase)
        self.bot = Bot(token=TELEGRAM_BOT_TOKEN)
        self.summarizer = Summarization(api_key=MISTRAL_KEY)

    async def ensure_client_initialized(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        if not self.is_initialized:
            if self._client is None:
                self._client = create_client()
            await self.connect()
            self.is_initialized = True
        self.client = self._client

    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã"""
        try:
            if not self._client.is_connected():
                await self._client.connect()
            
            if not await self._client.is_user_authorized():
                print("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
                await self._client.start(phone=PHONE_NUMBER)
                await self._client.get_me()
                print("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            else:
                print("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é")
                
            print("Telethon client connected successfully")
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Telegram: {e}")
            return False

    async def get_entity(self, entity_name):
        """Fetches a Telegram entity (such as a channel or user) by its name."""
        try:
            if not self.client.is_connected():
                await self.connect()
            
            entity = await self.client.get_entity(entity_name)
            return entity
        except Exception as e:
            logging.error(f"Error getting entity {entity_name}: {e}")
            return None

    async def scrape_messages(self, entity_name: str, limit: int = 400, time_range: str = "24h") -> List[
        Dict[str, Any]]:
        """
        Scrapes messages from a given Telegram channel within a specified time range.
        Args:
            entity_name (str): The username or channel name of the Telegram entity.
            limit (int, optional): The maximum number of messages to scrape. Defaults to 400.
            time_range (str, optional): The time range for filtering messages.
                                        Accepts "24h" for the last 24 hours or "7d" for the last 7 days.
                                        Defaults to "24h".
        Returns:
            List[Dict[str, Any]]: A list of dictionaries where each dictionary contains:
                - 'message_id' (int): The unique ID of the message.
                - 'message' (str): The text content of the message.
                - 'message_date' (datetime): The timestamp of when the message was sent.
            Returns an empty list if no messages are found or an error occurs.
        """
        entity = await self.get_entity(entity_name)
        if not entity:
            return []

        now = datetime.utcnow()
        start_time = now - timedelta(hours=24) if time_range == "24h" else now - timedelta(days=7)

        messages = []
        try:
            async for message in self.client.iter_messages(entity, limit=limit):
                message_date_naive = message.date.replace(tzinfo=None)
                if message_date_naive >= start_time:
                    messages.append({
                        "message_id": message.id,
                        "message": message.text,
                        "message_date": message.date
                    })
                else:
                    break
        except errors.FloodWaitError as e:
            print(f'Have to sleep {e.seconds} seconds')
            await asyncio.sleep(e.seconds)
            return await self.scrape_messages(entity_name, limit, time_range)
        except Exception as e:
            print(f"Failed to scrape messages: {e}")

        return messages

    async def check_new_messages(self, user_id: int, time_range: str = "1h"):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        try:
            user_channels = await self.db.fetch_user_channels(user_id)
            if not user_channels:
                await self.bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_channels.")
                return

            now = datetime.utcnow()
            start_time = now - timedelta(hours=1) if time_range == "1h" else now - timedelta(minutes=30)
            aggregated_news = []

            for channel in user_channels:
                messages = await self.scrape_messages(channel["channel_name"], limit=100)
                if not messages:
                    continue

                recent_messages = [
                    msg for msg in messages if msg["message_date"].replace(tzinfo=None) >= start_time
                ]

                for msg in recent_messages:
                    await self.db.save_channel_news(channel["channel_id"], msg["message"],
                                                    msg["message_date"].isoformat())

                    aggregated_news.append({
                        "channel": channel["channel_name"].lstrip("@"),
                        "message": msg["message"],
                        "message_id": msg["message_id"]
                    })
                await asyncio.sleep(3)

            if aggregated_news:
                digest = self.summarizer.summarize(aggregated_news)
                creation_timestamp = datetime.now().isoformat()
                await self.db.save_user_digest(user_id, digest, creation_timestamp)
                await self.bot.send_message(user_id, f"üì¢ –í–∞—à –¥–∞–π–¥–∂–µ—Å—Ç:\n\n{digest}")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ check_new_messages: {e}")
            await self.bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def start_auto_news_check(self, user_id: int, interval: int = 1800):
        """–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥."""
        print(f"üîç –ó–∞–ø—É—Å–∫–∞—é —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–∏–Ω—Ç–µ—Ä–≤–∞–ª {interval // 60} –º–∏–Ω)...")

        # –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã channels_news –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        await self.db.cleanup_old_news()

        while user_id in TelegramScraper.running_tasks:
            print(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {user_id}...")
            await self.check_new_messages(user_id, time_range="1h")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
            print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}. –°–ª–µ–¥—É—é—â–∞—è —á–µ—Ä–µ–∑ {interval // 60} –º–∏–Ω—É—Ç.")
            await asyncio.sleep(interval)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π

    def stop_auto_news_check(self, user_id: int):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if user_id in TelegramScraper.running_tasks:
            TelegramScraper.running_tasks[user_id].cancel()
            del TelegramScraper.running_tasks[user_id]
            return True
        return False
