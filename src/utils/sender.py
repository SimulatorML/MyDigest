import logging
from typing import List, Union, Callable
from aiogram import Bot
from src.data.database import SupabaseDB

logger = logging.getLogger(__name__)

class AnnouncementSender:
    def __init__(self, bot: Bot, db: SupabaseDB):
        self.bot = bot
        self.db = db

    def retrieve_current_users(self) -> List[int]:
        """–ü–æ–ª—É—á–∏—Ç—å ID –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î."""
        try:
            response = (
                self.db.client.table("users")
                .select("user_id")
                .eq("is_receiving_news", True)
                .execute()
            )
            return [user["user_id"] for user in response.data]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
            return []

    async def send(
        self,
        message: str,
        for_users: Union[List[int], Callable[[], List[int]]] = None
    ):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        if for_users is None:
            user_ids = self.retrieve_current_users()
        elif callable(for_users):
            user_ids = for_users()
        else:
            user_ids = for_users

        # –û—Ç–ø—Ä–∞–≤–∫–∞
        success = 0
        for user_id in user_ids:
            try:
                await self.bot.send_message(user_id, message)
                success += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user_id}: {e}")

        logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}/{len(user_ids)}")

if __name__ == "__main__":
    import asyncio
    from src.config import TELEGRAM_BOT_TOKEN
    from src.data.database import supabase

    async def main():
        bot = Bot(token=TELEGRAM_BOT_TOKEN)
        db = SupabaseDB(supabase)
        sender = AnnouncementSender(bot, db)

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ------------------------------------------
        # –í–∞—Ä–∏–∞–Ω—Ç 1: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        for_users = sender.retrieve_current_users
        
        # # –í–∞—Ä–∏–∞–Ω—Ç 2: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —é–∑–µ—Ä–∞–º
        # for_users = [1006278099]  # –°–ø–∏—Å–æ–∫ ID
        
        message = "üéâ –ü–æ—è–≤–∏–ª–∞—Å—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤!"
        # -------------------------------------------------------

        try:
            await sender.send(message, for_users)
        finally:
            await bot.session.close()  # –Ø–≤–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏

    asyncio.run(main())