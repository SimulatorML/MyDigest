import asyncio
import re
from datetime import datetime
from aiogram import Router
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from src.scraper import TelegramScraper
from src.data.database import supabase
from src.data.database import SupabaseDB

# from src.data.database import (
#     fetch_user,
#     fetch_user_channels,
#     add_user,
#     add_user_channels,
#     delete_user_channels,
#     clear_user_channels,
#     # fetch_user_digests
#     # make_digest
# )


router = Router()
db = SupabaseDB(supabase)


class UserStates(StatesGroup):
    waiting_for_channels = State()
    waiting_for_delete = State()


@router.message(CommandStart())
async def process_start_command(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add_channels - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã\n"
        "/show_channels - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
        "/delete_channels - —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª—ã\n"
        "/clear_channels - –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        # "/daily_digest - –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –¥–µ–Ω—å\n"
        "/receive_news - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–≤–æ–¥–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ —á–∞—Å\n"
    )
    user_id = message.from_user.id
    username = message.from_user.username if message.from_user.username else "unknown"
    login_timestamp = datetime.now().isoformat()

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_exists = await db.fetch_user(user_id)
    if not user_exists:
        await db.add_user(user_id, username, login_timestamp)
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    else:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        # user_channels = await fetch_user_channels(user_id)
        # if user_channels:
        #     await make_digest(user_id)         # —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏–¥–∂–µ—Å—Ç–∞
        #     await message.answer("–î–∞–π–¥–∂–µ—Å—Ç —Å–æ–∑–¥–∞–Ω.")
        #     await message.answer("–í–æ—Ç –î–∞–π–¥–∂–µ—Å—Ç –∏–∑ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤:\n")
        #     await fetch_user_digests(user_id)  # –í—ã–≤–æ–¥ –¥–∞–π–¥–∂–µ—Å—Ç–∞


@router.message(Command(commands="help"))
async def process_help_command(message: Message):
    await message.answer(
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö Telegram –∫–∞–Ω–∞–ª–æ–≤.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add_channels - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã\n"
        "/show_channels - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
        "/delete_channels - —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª—ã\n"
        "/clear_channels - –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        # "/daily_digest - –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –¥–µ–Ω—å\n"
        "/receive_news - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–≤–æ–¥–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ —á–∞—Å\n"
    )


@router.message(Command(commands="add_channels"))
async def process_add_channels_command(message: Message, state: FSMContext):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: @channel1 @channel2"
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–∞–Ω–∞–ª–æ–≤
    await state.set_state(UserStates.waiting_for_channels)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
@router.message(UserStates.waiting_for_channels)
async def process_channels_input(message: Message, state: FSMContext):
    user_id = message.from_user.id
    channels_text = message.text.strip()
    addition_timestamp = datetime.now().isoformat()

    if not channels_text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤.")
        return

    new_channels = {ch.strip() for ch in channels_text.split() if ch.strip()}

    if not all(re.match(r"^@[A-Za-z0-9_]+$", ch) for ch in new_channels):
        await message.answer(
            "–í—Å–µ –∫–∞–Ω–∞–ª—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ '@', –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –±—ã—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø—Ä–æ–±–µ–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    success = await db.add_user_channels(user_id, new_channels, addition_timestamp)
    if success:
        await message.answer(f"–ö–∞–Ω–∞–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã: {', '.join(new_channels)}")
        # user_channels = await fetch_user_channels(user_id)
        # if user_channels:
        #     await make_digest(user_id)
        # await message.answer("–î–∞–π–¥–∂–µ—Å—Ç —Å–æ–∑–¥–∞–Ω.")
        # await message.answer("–í–æ—Ç –î–∞–π–¥–∂–µ—Å—Ç –∏–∑ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤:\n")
        # await print(fetch_user_digests(user_id))  # –í—ã–≤–æ–¥ –¥–∞–π–¥–∂–µ—Å—Ç–∞
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤.")
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


@router.message(Command(commands="show_channels"))
async def process_show_channels_command(message: Message):
    user_id = message.from_user.id
    channels = await db.fetch_user_channels(user_id)

    if channels is not None:
        channel_names = [channel["channel_name"] for channel in channels]
        await message.answer(f"–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n{', '.join(channel_names)}")
    else:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")


@router.message(Command(commands="delete_channels"))
async def process_delete_command(message: Message, state: FSMContext):
    user_id = message.from_user.id
    channels = await db.fetch_user_channels(user_id)

    if not channels:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    channel_names = [channel["channel_name"] for channel in channels]
    await message.answer(
        f"–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤:\n"
        f"{', '.join(channel_names)}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∫–∞–Ω–∞–ª –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: @channel1 @channel2)"
    )
    await state.set_state(UserStates.waiting_for_delete)


@router.message(UserStates.waiting_for_delete)
async def process_delete_channels(message: Message, state: FSMContext):
    user_id = message.from_user.id

    channels_to_delete = {ch.strip() for ch in message.text.split() if ch.strip()}

    if not all(re.match(r"^@[A-Za-z0-9_]+$", ch) for ch in channels_to_delete):
        await message.answer(
            "–í—Å–µ –∫–∞–Ω–∞–ª—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ '@', –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –±—ã—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø—Ä–æ–±–µ–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    await db.delete_user_channels(user_id, channels_to_delete)
    await message.answer(f"–ö–∞–Ω–∞–ª—ã —É–¥–∞–ª–µ–Ω—ã: {', '.join(channels_to_delete)}")
    await state.clear()


@router.message(Command(commands="clear_channels"))
async def process_clear_command(message: Message):
    user_id = message.from_user.id
    await db.clear_user_channels(user_id)
    await message.answer("–í—Å–µ –∫–∞–Ω–∞–ª—ã —É–¥–∞–ª–µ–Ω—ã.")


# @router.message(Command("daily_digest"))
# async def daily_digest(message: Message) -> None:
#     user_id = message.from_user.id
#     digest = await make_digest(user_id, "24h")
#     if digest:
#         await message.answer("–î–Ω–µ–≤–Ω–æ–π –¥–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π:\n\n")
#         await fetch_user_digests(user_id)
#     else:
#         await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞.")


@router.message(Command("receive_news"))
async def receive_news_handler(message: Message):
    interval = 300  # modifiable
    divider = 60    # modifiable

    user_id = message.from_user.id
    scraper = TelegramScraper(user_id)

    if scraper.stop_auto_news_check(user_id):
        await message.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π...")

    task = asyncio.create_task(scraper.start_auto_news_check(user_id, interval=interval))   #1800 –±—ã–ª–æ
    scraper.running_tasks[user_id] = task

    # logger.info(f"–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
    await message.answer(f"‚úÖ –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–ø—É—â–µ–Ω–∞. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ {interval // divider} –º–∏–Ω—É—Ç.")


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def process_other_messages(message: Message):
    await message.answer(
        "–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help, "
        "—á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )
