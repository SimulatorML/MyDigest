import asyncio
import re
import logging
from datetime import datetime
from aiogram import Router
from aiogram.filters import Command, CommandStart
from aiogram import F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from src.scraper import TelegramScraper
from src.data.database import supabase
from src.data.database import SupabaseDB
from src.scraper import init_telethon_client

router = Router()
db = SupabaseDB(supabase)

class UserStates(StatesGroup):
    waiting_for_channels = State()
    waiting_for_delete = State()

############################## –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ###############################
@router.message(CommandStart())
async def process_start_command(message: Message):
    sent_message = await message.answer(
        "–ü—Ä–∏–≤–µ—Ç üôÇ –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤ –∏ —á–∞—Ç–æ–≤.\n\n"
        "1Ô∏è‚É£–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã:"
        "       —Å–ø–æ—Å–æ–± 1: –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞\n"
        "       —Å–ø–æ—Å–æ–± 2: –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /add_channels, –∑–∞—Ç–µ–º –≤—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤\n"
        "2Ô∏è‚É£–ù–∞–∂–º–∏—Ç–µ –Ω–∞ /receive_news, —á—Ç–æ–±—ã —Å–≤–æ–¥–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–∏—Ö–æ–¥–∏–ª–∏ –∫–∞–∂–¥—ã–π —á–∞—Å.\n"
        "3Ô∏è‚É£–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ —á–∞—Ç—É, —Ç–æ –µ–≥–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ /add_channels.\n\n"
        "–ö–∞–Ω–∞–ª–æ–≤ –∏ —á–∞—Ç–æ–≤ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ –∏ –∫–æ–≥–¥–∞ —É–≥–æ–¥–Ω–æ ‚ù§Ô∏è\n\n"
        "üëá–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add_channels - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã\n"
        "/show_channels - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
        "/delete_channels - —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª—ã\n"
        "/clear_channels - –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/receive_news - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–≤–æ–¥–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ —á–∞—Å\n"
    )

    # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —à–∞–ø–∫–µ –±–æ—Ç–∞
    await message.chat.pin_message(sent_message.message_id)

    user_id = message.from_user.id
    username = message.from_user.username if message.from_user.username else "unknown"
    login_timestamp = datetime.now().isoformat()

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_exists = await db.fetch_user(user_id)
    if not user_exists:
        await db.add_user(user_id, username, login_timestamp)
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    else:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")


############################## help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É #############################
@router.message(Command(commands="help"))
async def process_help_command(message: Message):
    await message.answer(
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö Telegram –∫–∞–Ω–∞–ª–æ–≤.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add_channels - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã\n"
        "/show_channels - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
        "/delete_channels - —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª—ã\n"
        "/clear_channels - –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/receive_news - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–≤–æ–¥–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ —á–∞—Å\n"
    )


############################## add_channels - –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã ######################

@router.message(Command(commands="add_channels"))
async def process_add_channels_command(message: Message, state: FSMContext):
    await message.answer(
        f"–ñ–¥—É —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ üëÄ\n\n"
        f"–§–æ—Ä–º–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–º.\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: @channel1 https://t.me/channel2 channel3\n\n"
        f"–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ - –Ω–∞–∂–º–∏—Ç–µ üëâ /cancel"
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–∞–Ω–∞–ª–æ–≤
    await state.set_state(UserStates.waiting_for_channels)

### –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
@router.message(UserStates.waiting_for_channels)
async def process_channels_input(message: Message, state: FSMContext):

    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –ø–æ—Å—Ç–∞ –∏–∑ –≥—Ä—É–ø–ø—ã, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ forwarded —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.forward_from_chat and message.forward_from_chat.type == 'channel':
        await forwarded_message(message)
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –æ—Ç —é–∑–µ—Ä–∞ –≤ —á–∞—Ç–µ, —Ç–æ –ø–∏—à–µ–º —á—Ç–æ —ç—Ç–æ —á–µ–ª–æ–≤–µ–∫
    if message.from_user and not message.text.startswith('/'):
        await message.answer("‚ùå–ö–∞–∂–µ—Ç—Å—è, –≤—ã –ø–µ—Ä–µ—Å–ª–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —á–µ–ª–æ–≤–µ–∫–∞ üßç, –∞ –Ω–µ –ø–æ—Å—Ç –∏–∑ –≥—Ä—É–ø–ø—ã.\n\n"
                             "–ü–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞)\n\n"
                             "–ê –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –∫–∞–Ω–∞–ª–∞, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ üëâ /add_channels, –∞ –∑–∞—Ç–µ–º –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç –∫–∞–Ω–∞–ª–∞")
        return

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∫–æ–º–∞–Ω–¥–∞
    if message.text and message.text.startswith('/cancel'):
        await message.answer(f"–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ üëå")
        await state.clear()
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_id = message.from_user.id
    channels_text = message.text.strip()
    addition_timestamp = datetime.now().isoformat()

    if not channels_text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤.")
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
    new_channels = process_channel_list(channels_text)

    if not new_channels:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    try:
        success = await db.add_user_channels(user_id, list(new_channels), addition_timestamp)
        if success:
            channels_list = ', '.join(new_channels)
            await message.answer(f"–ö–∞–Ω–∞–ª—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã üëç\n{channels_list}")
        else:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        logging.error(f"Error adding channels for user {user_id}: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await state.clear()

############################## show_channels - –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª—ã #####################

@router.message(Command(commands="show_channels"))
async def process_show_channels_command(message: Message):
    user_id = message.from_user.id
    channels = await db.fetch_user_channels(user_id)

    if channels is not None:
        channel_names = [channel["channel_name"] for channel in channels]
        await message.answer(f"–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n{', '.join(channel_names)}")
    else:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")

############################## delete_channels - –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª—ã #################

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
@router.message(Command(commands="delete_channels"))
async def process_delete_command(message: Message, state: FSMContext):
    
    user_id = message.from_user.id
    channels = await db.fetch_user_channels(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    if not channels:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    channel_names = [channel["channel_name"] for channel in channels]
    await message.answer(
        f"–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤:\n"
        f"{', '.join(channel_names)}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∫–∞–Ω–∞–ª –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è\n\n"
        f"–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ - –Ω–∞–∂–º–∏—Ç–µ üëâ /cancel"
    )

    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–∞–Ω–∞–ª–æ–≤
    await state.set_state(UserStates.waiting_for_delete)

## –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@router.message(UserStates.waiting_for_delete)
async def process_delete_channels(message: Message, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ - –¥—Ä—É–≥–∞—è –∫–æ–º–∞–Ω–¥–∞
    if message.text.startswith('/'):
        await message.answer(f"–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ üëå")
        await state.clear()
        return

    user_id = message.from_user.id

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
    channels_to_delete = process_channel_list(message.text)

    if not channels_to_delete:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    if not all(re.match(r"^@[A-Za-z0-9_]+$", ch) for ch in channels_to_delete):
        await message.answer(
            "–ù–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    result = await db.delete_user_channels(user_id, list(channels_to_delete))
    if not result:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤\n–∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ.")
        return

    await message.answer(f"–ö–∞–Ω–∞–ª—ã —É–¥–∞–ª–µ–Ω—ã: {', '.join(channels_to_delete)}")
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

############################## clear_channels - –û—á–∏—Å—Ç–∏—Ç—å –∫–∞–Ω–∞–ª—ã #################

@router.message(Command(commands="clear_channels"))
async def process_clear_command(message: Message):
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
    confirm_button = InlineKeyboardButton(
        text='‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å',
        callback_data='confirm_clear'
    )
    cancel_button = InlineKeyboardButton(
        text='‚ùå –û—Ç–º–µ–Ω–∞',
        callback_data='cancel_clear'
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –æ–¥–∏–Ω —Ä—è–¥
    keyboard: list[list[InlineKeyboardButton]] = [
        [confirm_button, cancel_button]
    ]
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await message.answer(
        text='‚ö†Ô∏è–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –∫–∞–Ω–∞–ª—ã?\n'
             '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.',
        reply_markup=markup
    )

# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ
@router.callback_query(F.data == "confirm_clear")
async def process_clear_confirm(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    result = await db.clear_user_channels(user_id)
    if result:
        await callback.message.edit_text(
            "‚úÖ –í—Å–µ –∫–∞–Ω–∞–ª—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã."
        )
    else:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–∞–Ω–∞–ª–æ–≤."
        )

# –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ
@router.callback_query(F.data == "cancel_clear")
async def process_clear_cancel(callback: CallbackQuery):
    await callback.message.edit_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–∞—à–∏ –∫–∞–Ω–∞–ª—ã –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π."
    )

############################## receive_news - –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π ############

@router.message(Command("receive_news"))
async def receive_news_handler(message: Message):
    interval = 600  # modifiable
    divider = 60    # modifiable

    user_id = message.from_user.id
    scraper = TelegramScraper(user_id)

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
        await init_telethon_client()

        if scraper.stop_auto_news_check(user_id):
            await message.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π...")

        task = asyncio.create_task(scraper.start_auto_news_check(user_id, interval=interval))
        TelegramScraper.running_tasks[user_id] = task

        await message.answer(
            f"‚úÖ –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–ø—É—â–µ–Ω–∞. "
            f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ {interval // divider} –º–∏–Ω—É—Ç."
        )
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logging.error("Error in receive_news_handler: %s", e)

##############################  FORWARD: –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Å—ã–ª–∫—É #################

@router.message(lambda message: message.forward_from_chat and message.forward_from_chat.type == 'channel')
async def handle_forwarded_message(message: Message):
    await forwarded_message(message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏
async def forwarded_message(message: Message):
    
    user_id = message.from_user.id
    addition_timestamp = datetime.now().isoformat()
    channel = message.forward_from_chat.username

    if not channel:
        await message.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
        await message.delete()
        return

    if not channel.startswith("@"):
        channel = f"@{channel}"

    success = await db.add_user_channels(user_id, [channel], addition_timestamp)

    if success:
        await message.answer(f"–ö–∞–Ω–∞–ª {channel} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! ‚úîÔ∏è")
        await message.delete()
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await message.delete()
        return

############################## –ü–µ—Ä–µ—Ö–≤–∞—Ç –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ #############################

# –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def process_other_messages(message: Message):
    # –ï—Å–ª–∏ –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã –Ω–∞–∂–∞—Ç—å –Ω–∞ /cancel
    if message.text == "/cancel":
        await message.answer("–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å ü§∑‚Äç‚ôÇÔ∏è")
        return

    if message.forward_from:
        await message.answer("‚ùå–ö–∞–∂–µ—Ç—Å—è, –≤—ã –ø–µ—Ä–µ—Å–ª–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —á–µ–ª–æ–≤–µ–∫–∞ üßç, –∞ –Ω–µ –ø–æ—Å—Ç –∏–∑ –≥—Ä—É–ø–ø—ã.\n\n"
                             "–ü–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞)\n\n"
                             "–ê –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –∫–∞–Ω–∞–ª–∞, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ üëâ /add_channels, –∞ –∑–∞—Ç–µ–º –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç –∫–∞–Ω–∞–ª–∞")
        return
    
        # –ï—Å–ª–∏ —é–∑–µ—Ä —Å–µ–ª –ø–æ–ø–æ–π –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω
    if  message.text and not message.text.startswith('/'):
        # –ï—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∏–∑ –ª–∏—á–∫–∏
        await message.answer(
            "–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help, "
            "—á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ú–µ–Ω—é."
        )
        return


############################## –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ #############################
def process_channel_list(channels_text: str) -> set[str]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–º–µ–Ω –∫–∞–Ω–∞–ª–æ–≤.
    
    Args:
        channels_text (str): –¢–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞–Ω–∞–ª–æ–≤
        
    Returns:
        set[str]: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–º–µ–Ω –∫–∞–Ω–∞–ª–æ–≤
    """
    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º –∏ –∑–∞–ø—è—Ç—ã–º
    raw_channels = re.split(r'[,\s]+', channels_text)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
    processed_channels = set()
    for channel in raw_channels:
        try:
            # –û—á–∏—â–∞–µ–º –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
            channel = channel.strip()
            if not channel:
                continue
                
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –∏–∑ URL
            channel_name = channel.split('/')[-1].strip()
            
            # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
            channel_name = re.sub(r'[^\w]', '', channel_name)
            
            # –î–æ–±–∞–≤–ª—è–µ–º @ –≤ –Ω–∞—á–∞–ª–æ
            if not channel_name.startswith('@'):
                channel_name = f'@{channel_name}'
                
            processed_channels.add(channel_name)
        except Exception as e:
            logging.error(f"Error processing channel {channel}: {str(e)}")
            continue
            
    return processed_channels
