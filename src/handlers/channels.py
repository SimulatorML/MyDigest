import asyncio
import re
import logging
from datetime import datetime
from aiogram import Router
from aiogram.filters import Command, CommandStart, CommandObject
from aiogram import F
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from src.scraper import TelegramScraper
from src.data.database import supabase
from src.data.database import SupabaseDB
from src.scraper import init_telethon_client
from src.config import MISTRAL_KEY
from src.summarization import Summarization
import src.handlers.keyboards as kb

router = Router()
db = SupabaseDB(supabase)
summarizer = Summarization(api_key=MISTRAL_KEY)

class UserStates(StatesGroup):
    waiting_for_channels = State()
    waiting_for_delete = State()
    selecting_channels = State()
    waiting_for_interval = State()


############################## –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Ç—ä—é—Ç–æ—Ä–∏–∞–ª ###############################

TUTORIAL_STEPS = [
    (

'''–ü—Ä–∏–≤–µ—Ç! üôÇ –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤ –∏ —á–∞—Ç–æ–≤.

<b>–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã –æ–¥–Ω–∏–º –∏–∑ –¥–≤—É—Ö —Å–ø–æ—Å–æ–±–æ–≤:</b>

1Ô∏è‚É£ –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞.  
2Ô∏è‚É£ –ò–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. 

–ù–∞–ø—Ä–∏–º–µ—Ä:  
@channel1 https://t.me/channel2 channel3
        '''.strip()
    ),
    (

'''–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ü–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏</b>, —Ç–æ–≥–¥–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç –≤–∞–º –ø—Ä–∏–¥–µ—Ç –ø–µ—Ä–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç.

–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –Ω–æ–≤–æ—Å—Ç–∏ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –∑–∞ 1 –ø—Ä–µ–¥—ã–¥—É—â–∏–π —á–∞—Å, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª, –Ω–∞–∂–∞–≤ –Ω–∞ /set_interval.

–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö —Å–≤–æ–¥–æ–∫, –º–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏</b>. –ß—Ç–æ–±—ã –∑–∞–Ω–æ–≤–æ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏—à—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ü–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏</b>.
        '''.strip()
    ),
    (
        '''
<b>–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ —á–∞—Ç—É</b>, —Ç–æ –µ–≥–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É <b>–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã</b>.

–ö–∞–Ω–∞–ª–æ–≤ –∏ —á–∞—Ç–æ–≤ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ –∏ –∫–æ–≥–¥–∞ —É–≥–æ–¥–Ω–æ ‚ù§Ô∏è
        '''.strip()
    ),
    (
        '''
–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥:

    /set_interval    - ‚è≤Ô∏è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª
    /delete_channels - üóëÔ∏è —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª—ã
    /receive_news    - üì∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–≤–æ–¥–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
    /stop_news       - ‚õîÔ∏è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–¥–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π
    /show_channels   - üìã –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤

–ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞–∑–∞–¥¬ª, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É –∏–ª–∏ ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å¬ª, —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å.
        '''.strip()
    )
]

@router.message(CommandStart())
async def process_start_command(message: Message):

    user_id = message.from_user.id
    username = message.from_user.username if message.from_user.username else "unknown"
    login_timestamp = datetime.now().isoformat()

    user_exists = await db.fetch_user(user_id)
    if not user_exists:
        await db.add_user(user_id, username, login_timestamp, check_interval=3600)


    # 2) Prepare the first tutorial screen
    step_index = 0
    total_steps = len(TUTORIAL_STEPS)

    text = TUTORIAL_STEPS[step_index]
    keyboard = get_tutorial_keyboard(step_index, total_steps)

    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    await message.answer("–í–æ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb.menu)


def get_tutorial_keyboard(step_index: int, total_steps: int) -> InlineKeyboardMarkup:
    """
    Inline keyboard helper: returns 'Back' + 'Next' or 'Finish' buttons, depending on the step.
    """
    buttons = []

    # Show '‚Üê –ù–∞–∑–∞–¥' if not on the first screen
    if step_index > 0:
        buttons.append(
            InlineKeyboardButton(
                text="‚Üê –ù–∞–∑–∞–¥",
                callback_data=f"tutorial_back_{step_index}"
            )
        )

    # Show '–î–∞–ª–µ–µ ‚Üí' if not on the last screen
    if step_index < total_steps - 1:
        buttons.append(
            InlineKeyboardButton(
                text="–î–∞–ª–µ–µ ‚Üí",
                callback_data=f"tutorial_next_{step_index}"
            )
        )
    else:
        # On the last screen, show '–ó–∞–≤–µ—Ä—à–∏—Ç—å'
        buttons.append(
            InlineKeyboardButton(
                text="–ó–∞–≤–µ—Ä—à–∏—Ç—å",
                callback_data="tutorial_finish"
            )
        )
    return InlineKeyboardMarkup(inline_keyboard=[buttons])


# ---------- TUTORIAL NAVIGATION CALLBACKS ----------

@router.callback_query(lambda c: c.data and c.data.startswith("tutorial_next_"))
async def tutorial_next_handler(callback: CallbackQuery):
    await callback.answer()

    data = callback.data  # e.g. "tutorial_next_0"
    current_step = int(data.split("_")[-1])
    next_step = current_step + 1

    total_steps = len(TUTORIAL_STEPS)
    if next_step < total_steps:
        new_text = TUTORIAL_STEPS[next_step]
        new_kb = get_tutorial_keyboard(next_step, total_steps)
        await callback.message.edit_text(new_text, reply_markup=new_kb, parse_mode="HTML")


@router.callback_query(lambda c: c.data and c.data.startswith("tutorial_back_"))
async def tutorial_back_handler(callback: CallbackQuery):
    await callback.answer()

    data = callback.data  # e.g. "tutorial_back_2"
    current_step = int(data.split("_")[-1])
    prev_step = current_step - 1

    if prev_step >= 0:
        new_text = TUTORIAL_STEPS[prev_step]
        new_kb = get_tutorial_keyboard(prev_step, len(TUTORIAL_STEPS))
        await callback.message.edit_text(new_text, reply_markup=new_kb, parse_mode="HTML")


# ---------- 6) Handle "Finish" button ----------

@router.callback_query(lambda c: c.data and c.data == "tutorial_finish")
async def tutorial_finish_handler(callback: CallbackQuery):
    """
    Handles the 'Finish' button on the last step.
    """
    await callback.answer()
    await callback.message.edit_text(
        "–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞."
    )

############################## help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É #############################
@router.message(F.text == "–ü–æ–º–æ—â—å")
async def handle_help_btn(message: Message):
    # Reuse /stop_news logic:
    await process_help_command(message)

@router.message(Command(commands="help"))
async def process_help_command(message: Message):
    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/set_interval    - ‚è≤Ô∏è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª\n"
        "/delete_channels - üóëÔ∏è —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª—ã\n"
        "/receive_news    - üì∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–≤–æ–¥–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π\n"
        "/stop_news       - ‚õîÔ∏è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–¥–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π\n"
        "/show_channels   - üìã –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
    )

############################## set_interval - –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤  #####################

### –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞
async def _restart_news_check(user_id: int, interval_sec: int, message: Message):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –Ω–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º."""
    scraper = TelegramScraper(user_id)
    try:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if user_id in TelegramScraper.running_tasks:
            TelegramScraper.running_tasks[user_id].cancel()
            del TelegramScraper.running_tasks[user_id]
            await message.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É...")

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        task = asyncio.create_task(scraper.start_auto_news_check(user_id, interval=interval_sec))
        TelegramScraper.running_tasks[user_id] = task
        await message.answer(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–ø—É—â–µ–Ω–∞. –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval_sec // 60} –º–∏–Ω.")

    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logging.error("–û—à–∏–±–∫–∞ –≤ _restart_news_check: %s", e)

### –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
@router.message(Command("set_interval"))
async def set_interval_handler(message: Message, command: CommandObject, state: FSMContext):
    args = command.args
    if not args:
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö (–æ—Ç 5 –¥–æ 1440).\n\n"
                             "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                             "`120` –¥–ª—è 2 —á–∞—Å–æ–≤\n"
                             "`180` –¥–ª—è 3 —á–∞—Å–æ–≤\n"
                             "`300` –¥–ª—è 5 —á–∞—Å–æ–≤\n"
                             "`720` –¥–ª—è 12 —á–∞—Å–æ–≤\n"
                             "`1440` –¥–ª—è 24 —á–∞—Å–æ–≤\n\n"
                             "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel",
                             parse_mode="Markdown")
        await state.set_state(UserStates.waiting_for_interval)
        return

    try:
        interval_min = int(args.strip())
        interval_sec = interval_min * 60

        if interval_min < 5 or interval_min > 1440:
            raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª")

        user_id = message.from_user.id
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
        await db.set_user_interval(user_id, interval_sec)
        await _restart_news_check(user_id, interval_sec, message)
        await state.clear()

    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 5 –¥–æ 1440.")
    except Exception as e:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º!")
        logging.error("–û—à–∏–±–∫–∞ –≤ set_interval_handler: %s", e)

@router.message(UserStates.waiting_for_interval)
async def process_interval_input(message: Message, state: FSMContext):

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∫–æ–º–∞–Ω–¥–∞
    if message.text and message.text.startswith('/'):
        await message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ üëå")
        await state.clear()
        return

    try:
        interval_min = int(message.text.strip())
        interval_sec = interval_min * 60

        if interval_min < 5 or interval_min > 1440:
            raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª")
        
        user_id = message.from_user.id

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –ë–î
        await db.set_user_interval(user_id, interval_sec)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —é–∑–µ—Ä–∞ –Ω–∞ –∞–∫–≤—Ç–∏–Ω–æ–≥–æ –≤ is_receiving_news
        await db.set_user_receiving_news(user_id, True)
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
        await _restart_news_check(user_id, interval_sec, message)
        await state.clear()

    except ValueError:
        await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 5 –¥–æ 1440.\n\n"
                             "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                             "`120` –¥–ª—è 2 —á–∞—Å–æ–≤\n"
                             "`180` –¥–ª—è 3 —á–∞—Å–æ–≤\n"
                             "`300` –¥–ª—è 5 —á–∞—Å–æ–≤\n"
                             "`720` –¥–ª—è 12 —á–∞—Å–æ–≤\n"
                             "`1440` –¥–ª—è 24 —á–∞—Å–æ–≤\n\n"
                             "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel",
                             parse_mode="Markdown")
    except Exception as e:
        await message.answer("‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logging.error("–û—à–∏–±–∫–∞ –≤ process_interval_input: %s", e)

############################## show_channels - –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª—ã #####################

@router.message(Command(commands="show_channels"))
async def process_show_channels_command(message: Message):
    user_id = message.from_user.id
    channels = await db.fetch_user_channels(user_id)

    if channels is not None:
        channel_names = [channel["channel_name"] for channel in channels]
        await message.answer(f"–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n{', '.join(channel_names)}")
    else:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")



############################## delete_channels - –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª—ã #################
## –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª—ã" –∏–∑ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –º–µ–Ω—é
@router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª—ã")
async def handle_delete_channels_button(message: Message, state: FSMContext):
    await process_delete_command(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
@router.message(Command(commands="delete_channels"))
async def process_delete_command(message: Message, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ
    await state.clear()

    user_id = message.from_user.id
    channels = await db.fetch_user_channels(user_id)

    if not channels:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(channels=[channel["channel_name"] for channel in channels])
    await state.set_state(UserStates.selecting_channels)

    # –°–æ–∑–¥–∞–µ–º –±–∏–ª–¥–µ—Ä –¥–ª—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
    for channel in channels:
        channel_name = channel["channel_name"]
        builder.button(text=channel_name, callback_data=f"select_{channel_name}")

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ —Å—Ç—Ä–æ–∫–∞–º (–ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ)
    builder.adjust(2)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    builder.row(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_delete"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
    )
    builder.row(
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã", callback_data="delete_all")
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –µ–≥–æ):",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith('select_'), UserStates.selecting_channels)
async def process_select_callback(callback: CallbackQuery, state: FSMContext):
    channel_name = callback.data[len('select_'):]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –∏–∑ callback_data

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    selected_channels = data.get("selected_channels", [])
    channels = data.get("channels", [])

    # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª —É–∂–µ –≤—ã–±—Ä–∞–Ω, —É–±–∏—Ä–∞–µ–º –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞, –∏–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º
    if channel_name in selected_channels:
        selected_channels.remove(channel_name)
    else:
        selected_channels.append(channel_name)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(selected_channels=selected_channels)

    # –°–æ–∑–¥–∞–µ–º –±–∏–ª–¥–µ—Ä –¥–ª—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
    for channel in channels:
        text = f"üìå {channel}" if channel in selected_channels else channel
        builder.button(text=text, callback_data=f"select_{channel}")

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ —Å—Ç—Ä–æ–∫–∞–º (–ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ)
    builder.adjust(2)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    builder.row(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_delete"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
    )
    builder.row(
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã", callback_data="delete_all")  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã"
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –µ–≥–æ):",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", —É–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã.
@router.callback_query(F.data == "confirm_delete", UserStates.selecting_channels)
async def process_confirm_delete_callback(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    selected_channels = data.get("selected_channels", [])

    if not selected_channels:
        await callback.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
        return

    # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    result = await db.delete_user_channels(user_id, selected_channels)
    
    if result:
        await callback.message.edit_text(f"–ö–∞–Ω–∞–ª—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã: {', '.join(selected_channels)}")
    else:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤.")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "–û—Ç–º–µ–Ω–∞", –ø—Ä–æ—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
@router.callback_query(F.data == "cancel_delete", UserStates.selecting_channels)
async def process_cancel_delete_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–û–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()

@router.callback_query(F.data == "cancel")
async def process_cancel_callback(callback: CallbackQuery):
    await callback.message.edit_text("–û–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.message.edit_reply_markup(reply_markup=None)

## –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã
@router.callback_query(F.data == "delete_all", UserStates.selecting_channels)
async def process_delete_all_callback(callback: CallbackQuery, state: FSMContext):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="confirm_delete_all"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete_all")
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await callback.message.edit_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –∫–∞–Ω–∞–ª—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data == "confirm_delete_all", UserStates.selecting_channels)
async def process_confirm_delete_all_callback(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    result = await db.clear_user_channels(user_id)
    
    if result:
        await callback.message.edit_text("‚úÖ –í—Å–µ –∫–∞–Ω–∞–ª—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
    else:
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤.")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

@router.callback_query(F.data == "cancel_delete_all", UserStates.selecting_channels)
async def process_cancel_delete_all_callback(callback: CallbackQuery, state: FSMContext):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É –∫–∞–Ω–∞–ª–æ–≤
    data = await state.get_data()
    channels = data.get("channels", [])

    # –°–æ–∑–¥–∞–µ–º –±–∏–ª–¥–µ—Ä –¥–ª—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
    for channel in channels:
        channel_name = channel
        builder.button(text=channel_name, callback_data=f"select_{channel_name}")

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ —Å—Ç—Ä–æ–∫–∞–º (–ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ)
    builder.adjust(2)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    builder.row(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_delete"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
    )
    builder.row(
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã", callback_data="delete_all")
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –µ–≥–æ):",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


############################## receive_news - –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π ############
## –†–µ–∞–≥–∏—É–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏" –≤ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
@router.message(F.text == "–ü–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏")
async def handle_receive_news_btn(message: Message, state: FSMContext):
    # Reuse /receive_news logic:
    await receive_news_handler(message, state)

@router.message(Command("receive_news"))
async def receive_news_handler(message: Message, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    user_id = message.from_user.id
    
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ –ë–î
        interval_sec = await db.get_user_interval(user_id)
        
        # 2. –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ
        await db.set_user_receiving_news(user_id, True)
        
        # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Telethon
        await init_telethon_client()
        
        # 4. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Å —Ç–µ–∫—É—â–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        await _restart_news_check(user_id, interval_sec, message)
        
    except Exception as e:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π.")
        logging.error("–û—à–∏–±–∫–∞ –≤ receive_news_handler: %s", e)


############################## stop_news –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π #################

@router.message(F.text == "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏")
async def handle_stop_news_btn(message: Message, state: FSMContext):
    # Reuse /stop_news logic:
    await stop_news_handler(message, state)

@router.message(Command("stop_news"))
async def stop_news_handler(message: Message, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ
    await state.clear()

    user_id = message.from_user.id
    scraper = TelegramScraper(user_id)
    await db.set_user_receiving_news(user_id, False)
    scraper.stop_auto_news_check(user_id)
    await message.answer(
        "–í—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π. "
        "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–∑–æ–≤–∏—Ç–µ /receive_news"
    )


##############################  FORWARD: –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Å—ã–ª–∫—É #################

@router.message(F.forward_from_chat.func(lambda chat: chat and chat.type == 'channel'))
async def handle_forwarded_message(message: Message, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ
    # await state.clear()

    if message.media_group_id:
        data = await state.get_data()
        processed_groups = data.get("processed_media_groups", set())

        if message.media_group_id in processed_groups:
            await message.delete()
            return
        else:
            processed_groups.add(message.media_group_id)
            await state.update_data(processed_media_groups=processed_groups)
    await forwarded_message(message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏
async def forwarded_message(message: Message):
    
    user_id = message.from_user.id
    addition_timestamp = datetime.now().isoformat()
    channel = message.forward_from_chat.username
    # scraper = TelegramScraper(user_id)

    if not channel:
        await message.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
        await message.delete()
        return

    if not channel.startswith("@"):
        channel = f"@{channel}"

    # try:
    #     tasks = [
    #         asyncio.create_task(
    #             summarizer.determine_channel_topic(
    #                 await scraper.scrape_messages_long_term(channel, days=DAY_RANGE_INTERVAL, limit=10)
    #             )
    #         )
    #     ]

    #     # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
    #     channel_topics = await asyncio.gather(*tasks)
    # except Exception as e:
    #     # –ü—Ä–∏—Å—É–∂–¥–∞–µ–º –ø—É—Å—Ç–æ—Ç—É –µ—Å–ª–∏ –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É
    #     channel_topics = []
    #     logging.error("\nError determine_channel_topic for user %s: %s\n", user_id, e)

    channel_topics = None
    try:
        success = await db.add_user_channels(user_id, [channel], addition_timestamp, channel_topics)
        channels = await db.fetch_user_channels(user_id)
        channels_names = ', '.join([channel["channel_name"] for channel in channels])

        if success:
            await message.answer(f"–ö–∞–Ω–∞–ª {channel} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! ‚úîÔ∏è \n–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤: {channels_names}")
            await message.delete()
        else:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await message.delete()
            return
    
    except Exception as e:
        logging.error("\nError adding channels for user %s: %s\n", user_id, e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

##################################### –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç —é–∑–µ—Ä–∞ ####################################

#################### –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
@router.message(lambda message: message.text and not message.text.startswith('/'))
async def async_process_channels_input(message: Message):

    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –ø–æ—Å—Ç–∞ –∏–∑ –≥—Ä—É–ø–ø—ã, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ forwarded —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.forward_from_chat and message.forward_from_chat.type == 'channel':
        await forwarded_message(message)
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –æ—Ç —é–∑–µ—Ä–∞ –≤ —á–∞—Ç–µ, —Ç–æ –ø–∏—à–µ–º —á—Ç–æ —ç—Ç–æ —á–µ–ª–æ–≤–µ–∫
    if message.forward_from and message.from_user:
        await message.answer("‚ùå–ö–∞–∂–µ—Ç—Å—è, –≤—ã –ø–µ—Ä–µ—Å–ª–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —á–µ–ª–æ–≤–µ–∫–∞ üßç, –∞ –Ω–µ –ø–æ—Å—Ç –∏–∑ –≥—Ä—É–ø–ø—ã.\n\n"
                             "–ü–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞)\n\n"
                             "–ê –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –∫–∞–Ω–∞–ª–∞, —Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É —á–∞—Ç–∞ –∏–ª–∏ —Å—Å—ã–ª–∫—É –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞")
        return

    user_id = message.from_user.id
    channels_text = message.text.strip()
    addition_timestamp = datetime.now().isoformat()
    # scraper = TelegramScraper(user_id)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
    new_channels = process_channel_list(channels_text)
    if not new_channels:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    if not all(re.match(r"^@[A-Za-z0-9_]+$", ch) for ch in new_channels):
        await message.answer(
            "–ù–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return
    
    # –ü—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–º—ã –∫–∞–Ω–∞–ª–æ–≤
    # try:
    #     tasks = [
    #         asyncio.create_task(
    #             summarizer.determine_channel_topic(
    #                 await scraper.scrape_messages_long_term(channel, days=DAY_RANGE_INTERVAL, limit=10)
    #             )
    #         )
    #         for channel in new_channels
    #     ]

    #     # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
    #     channel_topics = await asyncio.gather(*tasks)
    # except Exception as e:
    #     # –ü—Ä–∏—Å—É–∂–¥–∞–µ–º –ø—É—Å—Ç–æ—Ç—É –µ—Å–ª–∏ –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É
    #     channel_topics = []
        # logging.error("\nError determine_channel_topic for user %s: %s\n", user_id, e)
    channel_topics = None
    try:
        channels = await db.fetch_user_channels(user_id)
        channels_names = ', '.join([channel["channel_name"] for channel in channels])

        success = await db.add_user_channels(user_id, list(new_channels), addition_timestamp, channel_topics)
        if success:
            channels_list = ', '.join(new_channels)
            await message.answer(f"–ö–∞–Ω–∞–ª—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã üëç\n{channels_list}. –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤: {channels_names}")
        else:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        logging.error("\nError adding channels for user %s: %s\n", user_id, e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


############################## –ü–µ—Ä–µ—Ö–≤–∞—Ç –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ #############################

# ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è —ç—Ç–æ—Ç –•—ç–Ω–¥–ª–µ—Ä –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—Å–µ–≥–¥–∞ –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
# –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def process_other_messages(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /cancel
    if message.text == "/cancel":
        current_state = await state.get_state()
        if current_state:
            await state.set_state(None)
            await message.answer("‚ùå –¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        else:
            await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã ü§∑")
        return

    if message.forward_from:
        await message.answer("‚ùå–ö–∞–∂–µ—Ç—Å—è, –≤—ã –ø–µ—Ä–µ—Å–ª–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —á–µ–ª–æ–≤–µ–∫–∞ üßç, –∞ –Ω–µ –ø–æ—Å—Ç –∏–∑ –≥—Ä—É–ø–ø—ã.\n\n"
                             "–ü–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞)\n\n"
                             "–ê –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –∫–∞–Ω–∞–ª–∞, —Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É —á–∞—Ç–∞ –∏–ª–∏ —Å—Å—ã–ª–∫—É –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞")
        return
    
        # –ï—Å–ª–∏ —é–∑–µ—Ä —Å–µ–ª –ø–æ–ø–æ–π –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω
    if  message.text and not message.text.startswith('/'):
        # –ï—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∏–∑ –ª–∏—á–∫–∏
        await message.answer(
            "‚ö†Ô∏è –Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/set_interval    - ‚è≤Ô∏è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª\n"
            "/delete_channels - üóëÔ∏è —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª—ã\n"
            "/receive_news    - üì∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–≤–æ–¥–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π\n"
            "/stop_news       - ‚õîÔ∏è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–¥–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π\n"
            "/show_channels   - üìã –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
        )
        return
    
    # –†–µ–∑–µ—Ä–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.")


############################## –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ #############################
def process_channel_list(channels_text: str) -> set[str]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–º–µ–Ω –∫–∞–Ω–∞–ª–æ–≤.
    """
    url_pattern = re.compile(r'(?:https?://)?t\.me/([^/?]+)')
    processed_channels = set()

    for raw_channel in re.split(r'[,\s]+', channels_text.strip()):
        channel = raw_channel.strip()
        if not channel:
            continue

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ URL
        if url_match := url_pattern.search(channel):
            channel_part = url_match.group(1).split('/')[0]
            if channel_part.startswith('@'):
                channel_name = channel_part
            else:
                channel_name = f"@{channel_part}"
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ "–≥–æ–ª—ã—Ö" –∏–º–µ–Ω
        elif re.match(r'^@?[A-Za-z0-9_]{5,}$', channel):
            channel_name = f"@{channel.lstrip('@')}"
        else:
            continue

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–ª–∏–Ω–µ –∏ —Å–∏–º–≤–æ–ª–∞–º
        if re.fullmatch(r'@[A-Za-z0-9_]{5,32}', channel_name):
            processed_channels.add(channel_name)

    return processed_channels

 
