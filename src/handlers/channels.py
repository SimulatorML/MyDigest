import asyncio
import re
import logging
import src.handlers.keyboards as kb
from datetime import datetime
from aiogram.enums import ContentType
from aiogram import Router
from aiogram.filters import Command, CommandStart, CommandObject
from aiogram import F
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from src.scraper import TelegramScraper
from src.data.database import supabase
from src.data.database import SupabaseDB
from src.scraper import init_telethon_client
from src.config import MISTRAL_KEY, DAY_RANGE_INTERVAL, GROUP_LOGS_ID
from src.summarization import Summarization
from src.handlers.messages import BOT_DESCRIPTION, TUTORIAL_STEPS

router = Router()
db = SupabaseDB(supabase)
summarizer = Summarization(api_key=MISTRAL_KEY)


class UserStates(StatesGroup):
    waiting_for_channels = State()
    waiting_for_delete = State()
    selecting_channels = State()
    try_selecting_channels = State()
    waiting_for_interval = State()
    waiting_for_comment = State()


############################## –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Ç—ä—é—Ç–æ—Ä–∏–∞–ª ###############################

@router.message(CommandStart())
async def process_start_command(message: Message):
    """
       Processes the /start command by registering the user (if not exists) and sending a greeting message.

       :param message: Incoming message object that triggered the /start command.
       :returns: None. Sends a message with BOT_DESCRIPTION and greeting_keyboard_inline.
    """

    user_id = message.from_user.id
    username = message.from_user.username if message.from_user.username else "unknown"
    login_timestamp = datetime.now().isoformat()

    user_exists = await db.fetch_user(user_id)
    if not user_exists:
        await db.add_user(user_id, username, login_timestamp)  # check_interval=3600 - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    await message.answer(text=BOT_DESCRIPTION, reply_markup=kb.greeting_keyboard_inline)


@router.callback_query(lambda c: c.data and c.data == "greeting")
async def greeting_callback_handler(callback: CallbackQuery):
    """
       Handles the callback query when the "greeting" button is pressed and sends the first tutorial step.

       :param callback: CallbackQuery object from the pressed inline button.
       :returns: None. Sends a new message with the first tutorial step and corresponding keyboard.
    """

    await callback.answer()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞.
    step_index = 0
    total_steps = len(TUTORIAL_STEPS)
    text = TUTORIAL_STEPS[step_index]
    keyboard = get_tutorial_keyboard(step_index, total_steps)

    await callback.message.answer(text=text, reply_markup=keyboard, parse_mode="HTML")


def get_tutorial_keyboard(step_index: int, total_steps: int) -> InlineKeyboardMarkup:
    """
    Generates an inline keyboard for the tutorial navigation with "Back", "Next", and "Try" buttons.

    :param step_index: Current step index of the tutorial.
    :param total_steps: Total number of tutorial steps.
    :returns: InlineKeyboardMarkup object with navigation buttons.
    """

    buttons = []

    # Show '‚Üê –ù–∞–∑–∞–¥' if not on the first screen
    if step_index > 0:
        buttons.append(
            InlineKeyboardButton(
                text="‚Üê –ù–∞–∑–∞–¥",
                callback_data=f"tutorial_back_{step_index}"
            )
        )

    # Show '–î–∞–ª–µ–µ ‚Üí' if not on the last screen
    if step_index < total_steps - 1:
        buttons.append(
            InlineKeyboardButton(
                text="–î–∞–ª–µ–µ ‚Üí",
                callback_data=f"tutorial_next_{step_index}"
            )
        )
    # Adding "Try" button
    try_button = [InlineKeyboardButton(
        text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å",
        callback_data="try"
    )]

    return InlineKeyboardMarkup(inline_keyboard=[buttons, try_button])


@router.callback_query(lambda c: c.data and c.data.startswith("tutorial_next_"))
async def tutorial_next_handler(callback: CallbackQuery):
    """
        Handles the callback query for moving to the next tutorial step.

        :param callback: CallbackQuery object containing data with the current step index.
        :returns: None. Edits the current message with the next tutorial step text and updated keyboard.
    """

    await callback.answer()

    data = callback.data  # e.g. "tutorial_next_0"
    current_step = int(data.split("_")[-1])
    next_step = current_step + 1

    total_steps = len(TUTORIAL_STEPS)
    if next_step < total_steps:
        new_text = TUTORIAL_STEPS[next_step]
        new_kb = get_tutorial_keyboard(next_step, total_steps)
        await callback.message.edit_text(new_text, reply_markup=new_kb, parse_mode="HTML")


@router.callback_query(lambda c: c.data and c.data.startswith("tutorial_back_"))
async def tutorial_back_handler(callback: CallbackQuery):
    """
        Handles the callback query for moving back to the previous tutorial step.

        :param callback: CallbackQuery object containing data with the current step index.
        :returns: None. Edits the current message with the previous tutorial step text and updated keyboard.
    """

    await callback.answer()

    data = callback.data  # e.g. "tutorial_back_2"
    current_step = int(data.split("_")[-1])
    prev_step = current_step - 1

    if prev_step >= 0:
        new_text = TUTORIAL_STEPS[prev_step]
        new_kb = get_tutorial_keyboard(prev_step, len(TUTORIAL_STEPS))
        await callback.message.edit_text(new_text, reply_markup=new_kb, parse_mode="HTML")


########################### –î–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å" ###########################

@router.callback_query(lambda c: c.data == "try")
async def try_handler(callback: CallbackQuery, state: FSMContext):
    """
    Handles the "Try" callback by sending a message with a list of example channels for selection.

    :param callback: CallbackQuery object triggered by the "Try" button.
    :param state: FSMContext for storing selected channels.
    :returns: None. Sends a message with an inline keyboard of example channels.
    """

    await callback.answer()

    # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤. –ö–ª—é—á display_name - —Ç–æ, —á—Ç–æ —É–≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–Ω–æ–ø–∫–µ, link - —Ä–µ–∞–ª—å–Ω–æ–µ –∫–∞–Ω–∞–ª –≤ Telegram
    example_channels = [
        {"display_name": "–†–ò–ê", "link": "@rian_ru"},
        {"display_name": "–†–∏–¥–æ–≤–∫–∞", "link": "@readovkanews"},
        {"display_name": "KarpovCourses",  "link": "@KarpovCourses"},
        {"display_name": "–°–ø–æ—Ä—Ç—Å", "link": "@sportsru"},
        {"display_name": "–ú–æ—Å–∫–≤–∞—á", "link": "@moscowach"},
        {"display_name": "GPTMainNews", "link": "@GPTMainNews"},
        {"display_name": "–ö–∏–Ω–æ–ø–æ–∏—Å–∫",  "link": "@kinopoisk"},
        {"display_name": "BOGDANISSIMO", "link": "@bogdanisssimo"},
    ]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ state
    await state.update_data(try_channels=example_channels, try_selected=[])

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤
    await state.set_state(UserStates.try_selecting_channels)

    builder = InlineKeyboardBuilder()

    for i, ch in enumerate(example_channels):
        builder.button(
            text=ch["display_name"],
            callback_data=f"try_select_{i}"
        )

    builder.adjust(2)  # –î–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ

    # –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–∞–Ω–∞–ª"
    builder.row(
        InlineKeyboardButton(
            text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –≤—ã—Å–ª–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç",
            callback_data="try_confirm"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–∞–Ω–∞–ª",
            callback_data="try_add_channel"
        )
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(lambda c: c.data.startswith("try_select_"), UserStates.try_selecting_channels)
async def try_select_channel_callback(callback: CallbackQuery, state: FSMContext):
    """
    Handles channel selection toggling. Updates the list of selected channels and refreshes the inline keyboard.

    :param callback: CallbackQuery object with data indicating the index of the selected channel.
    :param state: FSMContext for storing and updating selected channels.
    :returns: None. Edits the current message to update the selection status.
    """
    await callback.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å –∫–∞–Ω–∞–ª–∞:
    index_str = callback.data[len("try_select_"):]
    index = int(index_str)

    data = await state.get_data()

    example_channels = data.get("try_channels", [])
    selected_indices = data.get("try_selected", [])

    # –µ—Å–ª–∏ —ç—Ç–æ—Ç –∏–Ω–¥–µ–∫—Å —É–∂–µ –µ—Å—Ç—å –≤ selected_indices - —É–±–∏—Ä–∞–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º
    if index in selected_indices:
        selected_indices.remove(index)
    else:
        selected_indices.append(index)

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ state
    await state.update_data(try_selected=selected_indices)

    # –¢–µ–ø–µ—Ä—å –∑–∞–Ω–æ–≤–æ —Å—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –ø–æ–º–µ—á–∞—è –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã "üìå"
    builder = InlineKeyboardBuilder()

    for i, ch in enumerate(example_channels):
        if i in selected_indices:
            # –î–æ–±–∞–≤–ª—è–µ–º "üìå" –∫ –Ω–∞–∑–≤–∞–Ω–∏—é
            builder.button(
                text=f"üìå {ch['display_name']}",
                callback_data=f"try_select_{i}"
            )
        else:
            builder.button(
                text=ch['display_name'],
                callback_data=f"try_select_{i}"
            )

    builder.adjust(2)
    builder.row(
        InlineKeyboardButton(
            text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –≤—ã—Å–ª–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç",
            callback_data="try_confirm"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–∞–Ω–∞–ª",
            callback_data="try_add_channel"
        )
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(lambda c: c.data == "try_confirm", UserStates.try_selecting_channels)
async def try_confirm_callback(callback: CallbackQuery, state: FSMContext):
    """
    Processes the confirmation of selected channels:
      1. Retrieves selected channel indices from the state.
      2. Converts them into real channel links.
      3. Links channels to the user.
      4. Starts automatic news fetching.
      5. Sends a success message.

    :param callback: CallbackQuery object triggered by pressing the confirmation button.
    :param state: FSMContext containing the current selection and channel data.
    :returns: None. Performs database operations and starts background news retrieval.
    """
    data = await state.get_data()
    example_channels = data.get("try_channels", [])
    selected_indices = data.get("try_selected", [])

    if not selected_indices:
        await callback.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞!", show_alert=True)
        return

    # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    links = [example_channels[i]["link"] for i in selected_indices]

    # –°–≤—è–∑—ã–≤–∞–µ–º —ç—Ç–∏ –∫–∞–Ω–∞–ª—ã —Å —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    user_id = callback.from_user.id
    addition_timestamp = datetime.now().isoformat()

    try:
        channel_ids = await db.fetch_channel_ids(links)
        if channel_ids:
            await db.link_user_channels(user_id, channel_ids, addition_timestamp)
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å': %s", e)
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π,

    try:
        await db.set_user_receiving_news(user_id, True)
        scraper = TelegramScraper(user_id)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Telethon (–µ—Å–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω)
        await init_telethon_client()

        if scraper.stop_auto_news_check(user_id):
            await callback.message.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π...")

        # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é interval = 3600, –∫–æ–≥–¥–∞ –Ω–æ–≤—ã–π —é–∑–µ—Ä –ø—Ä–∏—Ö–æ–¥–∏—Ç
        task = asyncio.create_task(
            scraper.start_auto_news_check(
                user_id
            )
        )
        TelegramScraper.running_tasks[user_id] = task

        # –°–æ–æ–±—â–∏–º, —á—Ç–æ —Ñ–æ–Ω–æ–≤—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã
        await callback.message.answer(
            "‚úÖ –ö–∞–Ω–∞–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∏ –∑–∞–ø—É—â–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π. "
            f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ {3600 // 60} –º–∏–Ω—É—Ç.",
            reply_markup=kb.menu
        )
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ try_confirm: %s", e)
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()

@router.callback_query(lambda c: c.data == "try_add_channel")
async def try_add_channel_callback(callback: CallbackQuery, state: FSMContext):
    """
    Handles the callback when the user chooses to add a custom channel.
    Prompts the user to send a channel link or forward a message from a public channel.

    :param callback: CallbackQuery object triggered by the "–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–∞–Ω–∞–ª" button.
    :param state: FSMContext (unused in this function, but provided for consistency).
    :returns: None. Sends a message instructing the user on how to add a channel.
    """
    await callback.answer()
    await callback.message.answer("–•–æ—Ä–æ—à–æ, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç –∏–∑ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞. \n\n"
                                  "–î–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é —Å–Ω–∏–∑—É. üëá",
                                  reply_markup=kb.menu)


############################## set_interval - –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤  #####################

### –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
@router.message(Command("set_interval"))
async def set_interval_handler(message: Message, command: CommandObject, state: FSMContext):
    """
    Handles the /set_interval command to set the interval for receiving digests.

    This function prompts the user to input an interval in minutes if not provided
    as arguments. It then processes the arguments to validate and set the interval.
    If the interval is valid, it updates the user's interval setting and restarts the
    news checking task with the new interval.

    :param message: The incoming message object containing the command.
    :param command: The CommandObject containing parsed command arguments.
    :param state: The FSMContext for managing the state of the conversation.
    :returns: None. Sends messages to the user and updates their interval settings.
    """

    args = command.args if command else None
    if not args:
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö (–æ—Ç 5 –¥–æ 1440).\n\n"
                             "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                             "`120` –¥–ª—è 2 —á–∞—Å–æ–≤\n"
                             "`180` –¥–ª—è 3 —á–∞—Å–æ–≤\n"
                             "`300` –¥–ª—è 5 —á–∞—Å–æ–≤\n"
                             "`720` –¥–ª—è 12 —á–∞—Å–æ–≤\n"
                             "`1440` –¥–ª—è 24 —á–∞—Å–æ–≤\n\n"
                             "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel",
                             parse_mode="Markdown")
        await state.set_state(UserStates.waiting_for_interval)
        return
    await process_interval_args(message, args, state)


# –û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
async def process_interval_args(message: Message, args: str, state: FSMContext):
    """
    Process and validate interval arguments for setting the user's news digest interval.

    This function parses the provided interval argument, converts it to seconds, and
    validates that it falls within the acceptable range. If valid, it updates the user's
    interval settings in the database and restarts the news checking task. If invalid,
    it prompts the user for a correct value.

    :param message: The incoming message object containing the command.
    :param args: The string arguments from the command representing the interval in minutes.
    :param state: The FSMContext for managing the state of the conversation.
    :returns: None. Sends messages to the user and updates their interval settings.
    :raises: ValueError if the interval is out of the allowed range.
    :raises: General exceptions are logged and a user-friendly error message is sent.
    """

    try:
        interval_min = int(args.strip())
        interval_sec = interval_min * 60

        if interval_min < 5 or interval_min > 1440:
            raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª")

        user_id = message.from_user.id
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
        await db.set_user_interval(user_id, interval_sec)
        await _restart_news_check(user_id, interval_sec, message)
        await state.clear()

    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 5 –¥–æ 1440.")
    except Exception as e:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º!")
        logging.error("–û—à–∏–±–∫–∞ –≤ set_interval_handler: %s", e)

# –ö–Ω–æ–ø–∫–∞ –≤ –º–µ–Ω—é
@router.message(F.text == "‚è≤Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª")
async def handle_interval_btn(message: Message, state: FSMContext):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö (–æ—Ç 5 –¥–æ 1440).\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "`120` –¥–ª—è 2 —á–∞—Å–æ–≤\n"
        "`180` –¥–ª—è 3 —á–∞—Å–æ–≤\n"
        "`300` –¥–ª—è 5 —á–∞—Å–æ–≤\n"
        "`720` –¥–ª—è 12 —á–∞—Å–æ–≤\n"
        "`1440` –¥–ª—è 24 —á–∞—Å–æ–≤\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel",
        parse_mode="Markdown"
    )
    await state.set_state(UserStates.waiting_for_interval)

@router.message(UserStates.waiting_for_interval)
async def process_interval_input(message: Message, state: FSMContext):
    """
    Handles the message containing the interval for setting the user's news digest interval.

    This function processes the user's input as a string, parses it into an integer, and validates
    that it falls within the acceptable range. If valid, it updates the user's interval settings in
    the database and restarts the news checking task. If invalid, it prompts the user for a correct
    value. If the message is a command, it resets the state to the default state and sends a message
    indicating that the interval setup was cancelled.
    """
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∫–æ–º–∞–Ω–¥–∞
    if message.text and message.text.startswith('/'):
        await message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ üëå")
        await state.clear()
        return

    try:
        interval_min = int(message.text.strip())
        interval_sec = interval_min * 60

        if interval_min < 5 or interval_min > 1440:
            raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª")

        user_id = message.from_user.id

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –ë–î
        await db.set_user_interval(user_id, interval_sec)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —é–∑–µ—Ä–∞ –Ω–∞ –∞–∫–≤—Ç–∏–Ω–æ–≥–æ –≤ is_receiving_news
        await db.set_user_receiving_news(user_id, True)
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
        await _restart_news_check(user_id, interval_sec, message)
        await state.clear()

    except ValueError:
        await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 5 –¥–æ 1440.\n\n"
                             "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                             "`120` –¥–ª—è 2 —á–∞—Å–æ–≤\n"
                             "`180` –¥–ª—è 3 —á–∞—Å–æ–≤\n"
                             "`300` –¥–ª—è 5 —á–∞—Å–æ–≤\n"
                             "`720` –¥–ª—è 12 —á–∞—Å–æ–≤\n"
                             "`1440` –¥–ª—è 24 —á–∞—Å–æ–≤\n\n"
                             "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel",
                             parse_mode="Markdown")
    except Exception as e:
        await message.answer("‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logging.error("–û—à–∏–±–∫–∞ –≤ process_interval_input: %s", e)


############################## /comment - –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ##############################

@router.message(Command("comment"))
async def start_comment(message: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–±–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    await message.answer(
        "üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n"
        "‚Ä¢ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é\n"
        "‚Ä¢ —Å–æ–æ–±—â–∏—Ç–µ –æ–± –æ—à–∏–±–∫–µ\n"
        "‚Ä¢ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏\n\n"
        "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ /cancel"
    )
    await state.set_state(UserStates.waiting_for_comment)

@router.message(UserStates.waiting_for_comment)
async def save_comment(message: Message, state: FSMContext):
    user_info = (
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n"
        f"üÜî ID: {message.from_user.id}"
    )

    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
        caption = user_info
        if message.caption or message.text:
            caption += f"\n\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n{message.caption or message.text}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
        if message.content_type == ContentType.TEXT:
            await message.bot.send_message(
                GROUP_LOGS_ID,
                f"{user_info}\n\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n{message.text}"
            )
        elif message.content_type == ContentType.PHOTO:
            await message.bot.send_photo(
                GROUP_LOGS_ID,
                message.photo[-1].file_id,
                caption=caption
            )
        elif message.content_type == ContentType.VIDEO:
            await message.bot.send_video(
                GROUP_LOGS_ID,
                message.video.file_id,
                caption=caption
            )
        elif message.content_type == ContentType.DOCUMENT:
            await message.bot.send_document(
                GROUP_LOGS_ID,
                message.document.file_id,
                caption=caption
            )

        await message.answer("‚úÖ –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–º–∞–Ω–¥–µ!")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {str(e)}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
        
    await state.clear()

# @router.message(UserStates.waiting_for_comment)
# async def save_comment(message: Message, state: FSMContext):

#     # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
#     if not message.text:
#         await message.answer("‚ùå –ü–æ–∫–∞ –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ ü•≤")
#         return

#     # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∫–æ–º–∞–Ω–¥–∞
#     if message.text and message.text.startswith('/'):
#         await message.answer("–æ—Ç–º–µ–Ω–∏–ª–∏ üëå")
#         await state.clear()
#         return
    
#     # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –±–∞–∑—É
#     user_id = message.from_user.id
#     comment = message.text.strip()

#     try:
#         # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –º–∞—Å—Å–∏–≤
#         success = await db.add_user_comment(user_id, comment)
#         if success:
#             await message.answer("‚úÖ –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–∏–Ω—è—Ç!")
#         else:
#             await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
            
#     except Exception as e:
#         logging.error(f"Comment error: {str(e)}")
#         await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        
#     await state.clear()

############################## show_channels - –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª—ã #####################

@router.message(Command(commands="show_channels"))
async def process_show_channels_command(message: Message):
    """
    Handles the /show_channels command to display the user's subscribed channels.

    This function fetches the list of channels associated with the user from the database.
    If the user has channels, it sends a message listing their channel names. If not, it
    informs the user that they have no added channels.

    :param message: The incoming message object containing the command.
    :type message: Message
    :returns: None. Sends a message listing the user's channels or indicating none are added.
    """

    user_id = message.from_user.id
    channels = await db.fetch_user_channels(user_id)

    if channels:
        channel_names = [channel["channel_name"] for channel in channels]
        await message.answer(f"–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n{', '.join(channel_names)}")
    else:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")



############################## delete_channels - –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª—ã #################
## –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª—ã" –∏–∑ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –º–µ–Ω—é
@router.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª—ã")
async def handle_delete_channels_button(message: Message, state: FSMContext):
    await process_delete_command(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
@router.message(Command(commands="delete_channels"))
async def process_delete_command(message: Message, state: FSMContext):
    """
    Handles the /delete_channels command and presents the user with a list of their channels to delete.

    If the user has no channels, it sends a message indicating that. Otherwise, it sets the user's state to
    `UserStates.selecting_channels` and sends a message with an inline keyboard where each channel is
    a button. The user can then select channels to delete by clicking on them. The selected channels are
    stored in the user's state. The user can confirm the deletion by clicking on the "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" button
    or cancel by clicking on the "–û—Ç–º–µ–Ω–∞" button. If the user wants to delete all channels at once, they
    can click on the "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã" button.
    """
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ
    await state.clear()

    user_id = message.from_user.id
    channels = await db.fetch_user_channels(user_id)

    if not channels:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(channels=[channel["channel_name"] for channel in channels])
    await state.set_state(UserStates.selecting_channels)

    # –°–æ–∑–¥–∞–µ–º –±–∏–ª–¥–µ—Ä –¥–ª—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
    for channel in channels:
        channel_name = channel["channel_name"]
        builder.button(text=channel_name, callback_data=f"select_{channel_name}")

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ —Å—Ç—Ä–æ–∫–∞–º (–ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ)
    builder.adjust(2)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    builder.row(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_delete"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
    )
    builder.row(
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã", callback_data="delete_all")
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –µ–≥–æ):",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith('select_'), UserStates.selecting_channels)
async def process_select_callback(callback: CallbackQuery, state: FSMContext):
    """
    Handles the callback when the user chooses to add a custom channel.
    Prompts the user to send a channel link or forward a message from a public channel.

    :param callback: CallbackQuery object triggered by the "–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–∞–Ω–∞–ª" button.
    :param state: FSMContext (unused in this function, but provided for consistency).
    :returns: None. Sends a message instructing the user on how to add a channel.
    """
    channel_name = callback.data[len('select_'):]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –∏–∑ callback_data

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    selected_channels = data.get("selected_channels", [])
    channels = data.get("channels", [])

    # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª —É–∂–µ –≤—ã–±—Ä–∞–Ω, —É–±–∏—Ä–∞–µ–º –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞, –∏–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º
    if channel_name in selected_channels:
        selected_channels.remove(channel_name)
    else:
        selected_channels.append(channel_name)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(selected_channels=selected_channels)

    # –°–æ–∑–¥–∞–µ–º –±–∏–ª–¥–µ—Ä –¥–ª—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
    for channel in channels:
        text = f"üìå {channel}" if channel in selected_channels else channel
        builder.button(text=text, callback_data=f"select_{channel}")

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ —Å—Ç—Ä–æ–∫–∞–º (–ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ)
    builder.adjust(2)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    builder.row(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_delete"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
    )
    builder.row(
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã", callback_data="delete_all")  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã"
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –µ–≥–æ):",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", —É–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã.
@router.callback_query(F.data == "confirm_delete", UserStates.selecting_channels)
async def process_confirm_delete_callback(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    selected_channels = data.get("selected_channels", [])

    if not selected_channels:
        await callback.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
        return

    # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    result = await db.delete_user_channels(user_id, selected_channels)

    if result:
        await callback.message.edit_text(f"–ö–∞–Ω–∞–ª—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã: {', '.join(selected_channels)}")
    else:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤.")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "–û—Ç–º–µ–Ω–∞", –ø—Ä–æ—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
@router.callback_query(F.data == "cancel_delete", UserStates.selecting_channels)
async def process_cancel_delete_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–û–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()

@router.callback_query(F.data == "cancel")
async def process_cancel_callback(callback: CallbackQuery):
    await callback.message.edit_text("–û–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.message.edit_reply_markup(reply_markup=None)

## –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã
@router.callback_query(F.data == "delete_all", UserStates.selecting_channels)
async def process_delete_all_callback(callback: CallbackQuery, state: FSMContext):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="confirm_delete_all"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete_all")
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await callback.message.edit_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –∫–∞–Ω–∞–ª—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data == "confirm_delete_all", UserStates.selecting_channels)
async def process_confirm_delete_all_callback(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    result = await db.clear_user_channels(user_id)

    if result:
        await callback.message.edit_text("‚úÖ –í—Å–µ –∫–∞–Ω–∞–ª—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
    else:
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤.")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

@router.callback_query(F.data == "cancel_delete_all", UserStates.selecting_channels)
async def process_cancel_delete_all_callback(callback: CallbackQuery, state: FSMContext):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É –∫–∞–Ω–∞–ª–æ–≤
    data = await state.get_data()
    channels = data.get("channels", [])

    # –°–æ–∑–¥–∞–µ–º –±–∏–ª–¥–µ—Ä –¥–ª—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
    for channel in channels:
        channel_name = channel
        builder.button(text=channel_name, callback_data=f"select_{channel_name}")

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ —Å—Ç—Ä–æ–∫–∞–º (–ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ)
    builder.adjust(2)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    builder.row(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_delete"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
    )
    builder.row(
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã", callback_data="delete_all")
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –µ–≥–æ):",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

############################## receive_news - –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π ############
## –†–µ–∞–≥–∏—É–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏" –≤ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
@router.message(F.text == "‚≠êÔ∏è –ü–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏")
async def handle_receive_news_btn(message: Message, state: FSMContext):
    # Reuse /receive_news logic:
    await receive_news_handler(message, state)

@router.message(Command("receive_news"))
async def receive_news_handler(message: Message, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    user_id = message.from_user.id

    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ –ë–î
        interval_sec = await db.get_user_interval(user_id)

        # 2. –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ
        await db.set_user_receiving_news(user_id, True)

        # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Telethon
        await init_telethon_client()

        # 4. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Å —Ç–µ–∫—É—â–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        await _restart_news_check(user_id, interval_sec, message)

    except Exception as e:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π.")
        logging.error("–û—à–∏–±–∫–∞ –≤ receive_news_handler: %s", e)


############################## stop_news –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π #################

@router.message(F.text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏")
async def handle_stop_news_btn(message: Message, state: FSMContext):
    # Reuse /stop_news logic:
    await stop_news_handler(message, state)

@router.message(Command("stop_news"))
async def stop_news_handler(message: Message, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ
    await state.clear()

    user_id = message.from_user.id
    scraper = TelegramScraper(user_id)
    await db.set_user_receiving_news(user_id, False)
    scraper.stop_auto_news_check(user_id)
    await message.answer(
        "–í—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π. "
        "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏</b>", parse_mode="HTML"
    )


##############################  FORWARD: –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Å—ã–ª–∫—É #################

@router.message(F.forward_from_chat.func(lambda chat: chat and chat.type == 'channel'))
async def handle_forwarded_message(message: Message, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ
    # await state.clear()

    if message.media_group_id:
        data = await state.get_data()
        processed_groups = data.get("processed_media_groups", set())

        if message.media_group_id in processed_groups:
            await message.delete()
            return

        processed_groups.add(message.media_group_id)
        await state.update_data(processed_media_groups=processed_groups)
    await forwarded_message(message)


async def forwarded_message(message: Message):
    """
    Processes a forwarded message to add a channel for the user.

    This function handles messages forwarded from public channels. It attempts to
    link the channel to the user if it already exists in the database, or adds
    the channel if it is not present. The function provides feedback to the user
    on the success or failure of the operation.

    :param message: The message object containing the forwarded channel message.
    :type message: Message
    :returns: None. Sends messages to the user for operation status.
    :raises Exception: Logs and informs the user if there's an error during the process.
    """

    user_id = message.from_user.id
    addition_timestamp = datetime.now().isoformat()
    channel = message.forward_from_chat.username
    scraper = TelegramScraper(user_id)

    if not channel:
        await message.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
        return

    channel = f"@{channel}" if not channel.startswith("@") else channel

    try:
        exist_channel_id = await db.fetch_channel_id(channel)
        if exist_channel_id:
            linking_user_channel = await db.link_user_single_channel(user_id, exist_channel_id, addition_timestamp)
            if linking_user_channel:
                await message.answer(f"–ö–∞–Ω–∞–ª {channel} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! ‚úîÔ∏è\n\n –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ - –∫–æ–º–∞–Ω–¥–∞ /show_channels")
                await message.delete()
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        else:
            messages = await scraper.scrape_messages_long_term(channel, days=DAY_RANGE_INTERVAL, limit=15)
            channel_topic = await summarizer.determine_channel_topic(messages)

            adding_channel = await db.add_single_channel(channel, channel_topic, addition_timestamp)
            if adding_channel:
                channel_id = await db.fetch_channel_id(channel)
                await db.link_user_single_channel(user_id, channel_id, addition_timestamp)
                await message.answer(f"–ö–∞–Ω–∞–ª {channel} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! ‚úîÔ∏è\n\n –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ - –∫–æ–º–∞–Ω–¥–∞ /show_channels")
                await message.delete()
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logging.error("\nError adding channel for user %s: %s\n", user_id, e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

##################################### –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç —é–∑–µ—Ä–∞ ####################################

#################### –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
@router.message(lambda message: message.text and not message.text.startswith('/'))
async def async_process_channels_input(message: Message):
    """
    Handles a message from a user and attempts to add channels from the text.
    If the message is a forwarded message from a channel, it calls the forwarded_message function.
    If the message is a forward from a user in a chat, it replies that the message is from a person, not a channel.
    Otherwise, it processes the message as a list of channels to add, scrapes the topics of the channels,
    adds the channels to the database, and links the channels to the user.

    :param message: The message object containing the text of the channels to add.
    :type message: Message
    :returns: None. Sends messages to the user for operation status.
    :raises Exception: Logs and informs the user if there's an error during the process.
    """
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –ø–æ—Å—Ç–∞ –∏–∑ –≥—Ä—É–ø–ø—ã, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ forwarded —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.forward_from_chat and message.forward_from_chat.type == 'channel':
        await forwarded_message(message)
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –æ—Ç —é–∑–µ—Ä–∞ –≤ —á–∞—Ç–µ, —Ç–æ –ø–∏—à–µ–º —á—Ç–æ —ç—Ç–æ —á–µ–ª–æ–≤–µ–∫
    if message.forward_from and message.from_user:
        await message.answer("‚ùå–ö–∞–∂–µ—Ç—Å—è, –≤—ã –ø–µ—Ä–µ—Å–ª–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —á–µ–ª–æ–≤–µ–∫–∞ üßç, –∞ –Ω–µ –ø–æ—Å—Ç –∏–∑ –≥—Ä—É–ø–ø—ã.\n\n"
                             "–ü–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞)\n\n"
                             "–ê –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –∫–∞–Ω–∞–ª–∞, —Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É —á–∞—Ç–∞ –∏–ª–∏ —Å—Å—ã–ª–∫—É –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞")
        return

    user_id = message.from_user.id
    channels_text = message.text.strip()
    addition_timestamp = datetime.now().isoformat()
    scraper = TelegramScraper(user_id)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
    new_channels = process_channel_list(channels_text)
    if not new_channels:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    if not all(re.match(r"^@[A-Za-z0-9_]+$", ch) for ch in new_channels):
        await message.answer(
            "–ù–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    try:
        new_channels = list(new_channels)

        channel_ids = await db.fetch_channel_ids(new_channels)
        if channel_ids:
            await db.link_user_channels(user_id, channel_ids, addition_timestamp)
            new_channels_list = ', '.join(new_channels)
            await message.answer(f"–ö–∞–Ω–∞–ª—ã {new_channels_list} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã! ‚úîÔ∏è\n\n –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ - –∫–æ–º–∞–Ω–¥–∞ /show_channels")

        else:
            topics = []
            for channel in new_channels:
                messages = await scraper.scrape_messages_long_term(channel, days=DAY_RANGE_INTERVAL, limit=15)
                channel_topic = await summarizer.determine_channel_topic(messages)
                topics.append(channel_topic)

            await db.add_channels(new_channels, topics, addition_timestamp)
            channel_ids = await db.fetch_channel_ids(new_channels)
            await db.link_user_channels(user_id, channel_ids, addition_timestamp)

            new_channels_list = ', '.join(new_channels)
            await message.answer(f"–ö–∞–Ω–∞–ª—ã {new_channels_list} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã! ‚úîÔ∏è\n\n –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ - –∫–æ–º–∞–Ω–¥–∞ /show_channels")

    except Exception as e:
        logging.error("\nError adding channels for user %s: %s\n", user_id, e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


############################## –ü–µ—Ä–µ—Ö–≤–∞—Ç –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ #############################

# ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è —ç—Ç–æ—Ç –•—ç–Ω–¥–ª–µ—Ä –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—Å–µ–≥–¥–∞ –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
# –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def process_other_messages(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /cancel
    if message.text == "/cancel":
        current_state = await state.get_state()
        if current_state:
            await state.set_state(None)
            await message.answer("‚ùå –¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        else:
            await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã ü§∑")
        return

    if message.forward_from:
        await message.answer("‚ùå–ö–∞–∂–µ—Ç—Å—è, –≤—ã –ø–µ—Ä–µ—Å–ª–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —á–µ–ª–æ–≤–µ–∫–∞ üßç, –∞ –Ω–µ –ø–æ—Å—Ç –∏–∑ –≥—Ä—É–ø–ø—ã.\n\n"
                             "–ü–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞)\n\n"
                             "–ê –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –∫–∞–Ω–∞–ª–∞, —Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É —á–∞—Ç–∞ –∏–ª–∏ —Å—Å—ã–ª–∫—É –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞")
        return
    
        # –ï—Å–ª–∏ —é–∑–µ—Ä —Å–µ–ª –ø–æ–ø–æ–π –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω
    if  message.text and not message.text.startswith('/'):
        # –ï—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∏–∑ –ª–∏—á–∫–∏
        await message.answer(
            "‚ö†Ô∏è –Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/set_interval    - ‚è≤Ô∏è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª\n"
            "/delete_channels - üóëÔ∏è —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª—ã\n"
            "/receive_news    - üì∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–≤–æ–¥–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π\n"
            "/stop_news       - ‚õîÔ∏è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–¥–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π\n"
            "/show_channels   - üìã –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
        )
        return
    
    # –†–µ–∑–µ—Ä–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.")

############################## –î–æ–ø —Ñ—É–Ω–∫—Ü–∏–∏ ##############################


############################## –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞
async def _restart_news_check(user_id: int, interval_sec: int, message: Message):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –Ω–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º."""
    scraper = TelegramScraper(user_id)
    try:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if user_id in TelegramScraper.running_tasks:
            TelegramScraper.running_tasks[user_id].cancel()
            del TelegramScraper.running_tasks[user_id]
            await message.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É...")

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        task = asyncio.create_task(scraper.start_auto_news_check(user_id, interval=interval_sec))
        TelegramScraper.running_tasks[user_id] = task
        await message.answer(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–ø—É—â–µ–Ω–∞. –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval_sec // 60} –º–∏–Ω.")

    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logging.error("–û—à–∏–±–∫–∞ –≤ _restart_news_check: %s", e)


############################## –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ #############################
def process_channel_list(channels_text: str) -> set[str]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–º–µ–Ω –∫–∞–Ω–∞–ª–æ–≤.
    """
    url_pattern = re.compile(r'(?:https?://)?t\.me/([^/?]+)')
    processed_channels = set()

    for raw_channel in re.split(r'[,\s]+', channels_text.strip()):
        channel = raw_channel.strip()
        if not channel:
            continue

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ URL
        if url_match := url_pattern.search(channel):
            channel_part = url_match.group(1).split('/')[0]
            if channel_part.startswith('@'):
                channel_name = channel_part
            else:
                channel_name = f"@{channel_part}"
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ "–≥–æ–ª—ã—Ö" –∏–º–µ–Ω
        elif re.match(r'^@?[A-Za-z0-9_]{5,}$', channel):
            channel_name = f"@{channel.lstrip('@')}"
        else:
            continue

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–ª–∏–Ω–µ –∏ —Å–∏–º–≤–æ–ª–∞–º
        if re.fullmatch(r'@[A-Za-z0-9_]{5,32}', channel_name):
            processed_channels.add(channel_name)

    return processed_channels
